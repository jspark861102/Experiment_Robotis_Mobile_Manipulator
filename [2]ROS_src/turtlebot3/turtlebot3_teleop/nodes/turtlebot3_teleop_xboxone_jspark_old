#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64MultiArray
from std_msgs.msg import Float64
from sensor_msgs.msg import Joy

import sys, select, os
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

BURGER_MAX_LIN_VEL = 0.22
BURGER_MAX_ANG_VEL = 2.84

WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

LIN_VEL_STEP_SIZE = 0.003
ANG_VEL_STEP_SIZE = 0.03

msg_init = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)

space key, s : force stop

---------------------------
---------------------------

Control Your OpenManpulator!
---------------------------
k   : target joint position : [3.0, 0.0, -1.00, 0.50,  0.6]
l   : target joint position : [3.0, 0.0,   0.0,  0.0, -1.0]

CTRL-C to quit
"""

e = """
Communications Failed
"""
joy_button = " "
joy_axis = " "

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel

def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel

def callback(msg):
    global joy_button
    global joy_axis

    if msg.buttons[0] == 1 :
        joy_button = "A"        
    elif msg.buttons[1] == 1 :
        joy_button = "B"        
    elif msg.buttons[2] == 1 :
        joy_button = "X"        
    elif msg.buttons[3] == 1 :
        joy_button = "Y"        
    elif msg.buttons[4] == 1 :
        joy_button = "LB"        
    elif msg.buttons[5] == 1 :
        joy_button = "RB"        
    elif msg.buttons[6] == 1 :
        joy_button = "START"        
    elif msg.buttons[7] == 1 :
        joy_button = "BACK"     
    else:
        joy_button = ""

    if msg.axes[6] == 1 :
        joy_axis = "mobile_left"
    elif msg.axes[6] == -1 :
        joy_axis = "mobile_right"
    elif msg.axes[7] == 1 :
        joy_axis = "mobile_forward"
    elif msg.axes[7] == -1 :
        joy_axis = "mobile_backward"
    elif msg.axes[2] < -0.9 :
        joy_axis = "gripper_close"
    elif msg.axes[5] < -0.9 :
        joy_axis = "gripper_open"
    else:
        joy_axis = " "

        

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)
    
    rospy.init_node('turtlebot3_teleop')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    pub_joint = rospy.Publisher('joint_trajectory_point', Float64MultiArray, queue_size=10)
    pub_gripper_time = rospy.Publisher('gripper_move_time', Float64, queue_size=10)
    pub_gripper_position = rospy.Publisher('gripper_position', Float64MultiArray, queue_size=10)
    sub = rospy.Subscriber('joy', Joy, callback)

    turtlebot3_model = rospy.get_param("model", "burger")


    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0
    target_joint = [3.0, 0.0, -1.57, 1.20, 0.6]
    current_joint = target_joint

    twist = Twist()
    array = Float64MultiArray()
    g_time = Float64()
    g_position = Float64MultiArray()

    global joy_button
    global joy_axis

    rate = rospy.Rate(100)
    while not rospy.is_shutdown():
        if joy_axis == "mobile_forward":
            target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
            status = status + 1
            print vels(target_linear_vel,target_angular_vel)
        elif joy_axis == "mobile_backward":
            target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
            status = status + 1
            print vels(target_linear_vel,target_angular_vel)
        elif joy_axis == "mobile_left":
            target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
            status = status + 1
            print vels(target_linear_vel,target_angular_vel)
        elif joy_axis == "mobile_right":
            target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
            status = status + 1
            print vels(target_linear_vel,target_angular_vel)
        elif joy_button == " " or joy_button == "RB" :
            target_linear_vel   = 0.0
            control_linear_vel  = 0.0
            target_angular_vel  = 0.0
            control_angular_vel = 0.0
            print vels(target_linear_vel, target_angular_vel)
        elif joy_button == "LB" :
            target_linear_vel   = 0.2
            control_linear_vel  = 0.0
            target_angular_vel  = 0.0
            control_angular_vel = 0.0
            status = status + 1
            print vels(target_linear_vel, target_angular_vel)
        #else:
            #if joy_button == "BACK":
            #    break

        if status == 20 :
            print msg_init
            status = 0

        if joy_button == "LB" :
            control_linear_vel = target_linear_vel 
            twist.linear.x = control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0

            control_angular_vel = target_angular_vel
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel

        else :
            control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
            twist.linear.x = control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0

            control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel

        pub.publish(twist)

        if joy_button == "A" :
            target_joint = [3.0, 0.0, -1.57, 1.20, 0.6]                
        elif joy_button == "B" :
            target_joint = [3.0, 0.0, 0.0, 0.0, 0.0]  
        elif joy_button == "X" :
            target_joint = [3.0, 0.0, 0.8, 0.0, -0.8]
        elif joy_button == "Y" :
            target_joint = [3.0, 0.0, 0.8, -1.0, 1.57]

        if (current_joint != target_joint) :            
            array.data = target_joint
            pub_joint.publish(array)  
            current_joint = target_joint   

        

        if joy_axis == "gripper_close":
            g_time.data = 1.0
            g_position.data = [-0.015]
            pub_gripper_time.publish(g_time)
            pub_gripper_position.publish(g_position)
        elif joy_axis == "gripper_open":
            g_time.data = 0.0
            g_position.data = [0.015]
            pub_gripper_time.publish(g_time)
            pub_gripper_position.publish(g_position)

        rate.sleep()

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)



